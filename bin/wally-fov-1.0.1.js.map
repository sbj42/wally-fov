{"version":3,"sources":["webpack://WallyFov/webpack/bootstrap","webpack://WallyFov/./src/geom/index.ts","webpack://WallyFov/./src/geom/mask-rect.ts","webpack://WallyFov/./src/geom/mask.ts","webpack://WallyFov/./src/geom/rectangle.ts","webpack://WallyFov/./src/geom/size.ts","webpack://WallyFov/./src/geom/offset.ts","webpack://WallyFov/./src/geom/direction-flags.ts","webpack://WallyFov/./src/geom/direction.ts","webpack://WallyFov/./src/field-of-view.ts","webpack://WallyFov/./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","geom","LOCAL_OFF","Offset","MaskRect","rect","initialValue","outsideValue","this","_rectangle","Rectangle","copyFrom","_mask","Mask","_outsideValue","toString","northWest","westX","northY","width","height","index","off","subtractOffset","getAt","x","y","set","containsOffset","setAt","forEach","cursor","callback","_this","addOffset","size","_size","Size","_bits","Array","area","fill","ret","empty","other","dy","dx","X_FROM_CARDINAL_DIRECTION","Y_FROM_CARDINAL_DIRECTION","addCardinalDirection","dir","DirectionFlags","directionFlagsToString","flags","NORTH","EAST","SOUTH","WEST","directionFlagsFromDirection","Direction","DIRECTIONS","directionOpposite","TileFlag","length","WEDGE_LOW","WEDGE_HIGH","WEDGE_COUNT","FieldOfViewMap","_tileFlags","_addFlag","flag","_removeFlag","addWall","removeWall","getWalls","ALL","getWall","addBody","BODY","removeBody","getBody","getFieldOfView","chebyshevRadius","origin","boundRect","mask","_quadrant","xDir","yDir","startX","startY","endDX","Math","min","max","endDY","farYFlag","WALL_SOUTH","WALL_NORTH","farXFlag","WALL_EAST","WALL_WEST","startMapIndex","startMaskIndex","wedges","Number","POSITIVE_INFINITY","yMapIndex","yMaskIndex","divYpos","divYneg","wedgeIndex","mapIndex","maskIndex","slopeY","slopeX","wallY","wallX","cutWedge","low","high","splice","field_of_view_1","geom_1"],"mappings":"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","file":"wally-fov-1.0.1.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bin/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","export * from './direction';\r\nexport * from './direction-flags';\r\nexport * from './offset';\r\nexport * from './size';\r\nexport * from './rectangle';\r\nexport * from './mask';\r\nexport * from './mask-rect';\r\n","import * as geom from '.';\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport class MaskRect implements geom.RectangleLike {\r\n    private readonly _rectangle = new geom.Rectangle();\r\n    private readonly _mask: geom.Mask;\r\n    private readonly _outsideValue: boolean;\r\n\r\n    constructor(rect: geom.RectangleLike, initialValue = false, outsideValue = false) {\r\n        this._rectangle.copyFrom(rect);\r\n        this._mask = new geom.Mask(rect, initialValue);\r\n        this._outsideValue = outsideValue;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `${this._rectangle.northWest}/${this._outsideValue}\\n${this._mask}`;\r\n    }\r\n\r\n    get westX() {\r\n        return this._rectangle.westX;\r\n    }\r\n\r\n    get northY() {\r\n        return this._rectangle.northY;\r\n    }\r\n\r\n    get width() {\r\n        return this._rectangle.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._rectangle.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this._mask.index(LOCAL_OFF.copyFrom(off).subtractOffset(this._rectangle.northWest));\r\n    }\r\n\r\n    getAt(index: number) {\r\n        return this._mask.getAt(index);\r\n    }\r\n\r\n    get(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        if (!this._rectangle.containsOffset(LOCAL_OFF)) {\r\n            return this._outsideValue;\r\n        }\r\n        return this._mask.get(LOCAL_OFF.subtractOffset(this._rectangle.northWest));\r\n    }\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean) {\r\n        this._mask.setAt(index, value);\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean) {\r\n        this._mask.set(LOCAL_OFF.copyFrom(off).subtractOffset(this._rectangle.northWest), value);\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    forEach(cursor: geom.Offset, callback: (cursor: geom.Offset, value: boolean) => void) {\r\n        this._mask.forEach(cursor, (off, value) => {\r\n            callback(off.addOffset(this._rectangle.northWest), value);\r\n        });\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nexport class Mask implements geom.SizeLike {\r\n    private readonly _size = new geom.Size();\r\n    private readonly _bits: boolean[];\r\n    // TODO consider Uint8Array for bits\r\n\r\n    constructor(size: geom.SizeLike, initialValue = false) {\r\n        this._size.copyFrom(size);\r\n        this._bits = new Array<boolean>(this._size.area).fill(initialValue);\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        let ret = '';\r\n        const off = new geom.Offset();\r\n        for (let y = 0; y < this._size.height; y ++) {\r\n            for (let x = 0; x < this._size.width; x ++) {\r\n                off.set(x, y);\r\n                ret += this.get(off.set(x, y)) ? '☑' : '☐';\r\n            }\r\n            ret += '\\n';\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    get width() {\r\n        return this._size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this._size.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this._size.index(off);\r\n    }\r\n\r\n    getAt(index: number) {\r\n        return this._bits[index];\r\n    }\r\n\r\n    get(off: geom.OffsetLike) {\r\n        return this.getAt(this.index(off));\r\n    }\r\n\r\n    // mutators\r\n\r\n    setAt(index: number, value: boolean) {\r\n        this._bits[index] = value;\r\n        return this;\r\n    }\r\n\r\n    set(off: geom.OffsetLike, value: boolean) {\r\n        return this.setAt(this.index(off), value);\r\n    }\r\n\r\n    // utilities\r\n\r\n    forEach(cursor: geom.Offset, callback: (cursor: geom.Offset, value: boolean) => void) {\r\n        let index = 0;\r\n        this._size.forEach(cursor, (off) => {\r\n            callback(off, this._bits[index]);\r\n            index ++;\r\n        });\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nexport interface RectangleLike extends geom.SizeLike {\r\n    readonly westX: number;\r\n    readonly northY: number;\r\n}\r\n\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\nexport class Rectangle implements RectangleLike, geom.SizeLike {\r\n    northWest: geom.Offset;\r\n    size: geom.Size;\r\n\r\n    constructor();\r\n    constructor(westX: number, northY: number, width: number, height: number);\r\n    constructor(westX?: number, northY?: number, width?: number, height?: number) {\r\n        if (typeof westX === 'undefined') {\r\n            westX = 0;\r\n        }\r\n        if (typeof northY === 'undefined') {\r\n            northY = 0;\r\n        }\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.northWest = new geom.Offset(westX, northY);\r\n        this.size = new geom.Size(width, height);\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.westX},${this.northY} ${this.width}x${this.height})`;\r\n    }\r\n\r\n    get northY() {\r\n        return this.northWest.y;\r\n    }\r\n\r\n    get southY() {\r\n        return this.northWest.y + this.size.height - 1;\r\n    }\r\n\r\n    get westX() {\r\n        return this.northWest.x;\r\n    }\r\n\r\n    get eastX() {\r\n        return this.northWest.x + this.size.width - 1;\r\n    }\r\n\r\n    get width() {\r\n        return this.size.width;\r\n    }\r\n\r\n    get height() {\r\n        return this.size.height;\r\n    }\r\n\r\n    get empty() {\r\n        return this.size.empty;\r\n    }\r\n\r\n    get area() {\r\n        return this.size.area;\r\n    }\r\n\r\n    // mutators\r\n\r\n    copyFrom(other: RectangleLike) {\r\n        this.northWest.set(other.westX, other.northY);\r\n        this.size.set(other.width, other.height);\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    containsOffset(off: geom.OffsetLike) {\r\n        return this.size.containsOffset(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return this.size.index(LOCAL_OFF.copyFrom(off).subtractOffset(this.northWest));\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nexport interface SizeLike {\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\nexport class Size implements SizeLike {\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor();\r\n    constructor(width: number, height: number);\r\n    constructor(width?: number, height?: number) {\r\n        if (typeof width === 'undefined') {\r\n            width = 0;\r\n        }\r\n        if (typeof height === 'undefined') {\r\n            height = 0;\r\n        }\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    // accessors\r\n\r\n    toString() {\r\n        return `(${this.width}x${this.height})`;\r\n    }\r\n\r\n    get empty() {\r\n        return this.width === 0 || this.height === 0;\r\n    }\r\n\r\n    get area() {\r\n        return this.width * this.height;\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: SizeLike) {\r\n        this.width = other.width;\r\n        this.height = other.height;\r\n        return this;\r\n    }\r\n\r\n    // utilities\r\n\r\n    containsOffset(off: geom.OffsetLike) {\r\n        return off.x >= 0 && off.y >= 0 && off.x < this.width && off.y < this.height;\r\n    }\r\n\r\n    index(off: geom.OffsetLike) {\r\n        return off.y * this.width + off.x;\r\n    }\r\n\r\n    forEach(cursor: geom.Offset, callback: (offset: geom.Offset) => void) {\r\n        for (let dy = 0; dy < this.height; dy ++) {\r\n            for (let dx = 0; dx < this.width; dx ++) {\r\n                cursor.x = dx;\r\n                cursor.y = dy;\r\n                callback(cursor);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\nconst X_FROM_CARDINAL_DIRECTION = [  0, 1, 0, -1 ];\r\nconst Y_FROM_CARDINAL_DIRECTION = [ -1, 0, 1,  0 ];\r\n\r\nexport interface OffsetLike {\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\nexport class Offset implements OffsetLike {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor();\r\n    constructor(x: number, y: number);\r\n    constructor(x?: number, y?: number) {\r\n        if (typeof x === 'undefined') {\r\n            x = 0;\r\n        }\r\n        if (typeof y === 'undefined') {\r\n            y = 0;\r\n        }\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    toString() {\r\n        return `(${this.x},${this.y})`;\r\n    }\r\n\r\n    // mutators\r\n\r\n    set(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    copyFrom(other: OffsetLike) {\r\n        this.x = other.x;\r\n        this.y = other.y;\r\n        return this;\r\n    }\r\n\r\n    addOffset(off: OffsetLike) {\r\n        this.x += off.x;\r\n        this.y += off.y;\r\n        return this;\r\n    }\r\n\r\n    addCardinalDirection(dir: geom.Direction) {\r\n        this.x += X_FROM_CARDINAL_DIRECTION[dir];\r\n        this.y += Y_FROM_CARDINAL_DIRECTION[dir];\r\n        return this;\r\n    }\r\n\r\n    subtractOffset(off: OffsetLike) {\r\n        this.x -= off.x;\r\n        this.y -= off.y;\r\n        return this;\r\n    }\r\n}\r\n","import * as geom from '.';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\nexport enum DirectionFlags {\r\n    NONE  = 0,\r\n    NORTH = 1,\r\n    EAST  = 2,\r\n    SOUTH = 4,\r\n    WEST  = 8,\r\n    ALL   = 15,\r\n}\r\n\r\nexport function directionFlagsToString(flags: DirectionFlags) {\r\n    let ret = '[';\r\n    if ((flags & DirectionFlags.NORTH) !== 0) {\r\n        ret += 'N';\r\n    }\r\n    if ((flags & DirectionFlags.EAST) !== 0) {\r\n        ret += 'E';\r\n    }\r\n    if ((flags & DirectionFlags.SOUTH) !== 0) {\r\n        ret += 'S';\r\n    }\r\n    if ((flags & DirectionFlags.WEST) !== 0) {\r\n        ret += 'W';\r\n    }\r\n    return ret + ']';\r\n}\r\n\r\n// conversion\r\n\r\nexport function directionFlagsFromDirection(dir: geom.Direction) {\r\n    return (1 << dir) as DirectionFlags;\r\n}\r\n","// tslint:disable:no-bitwise\r\n\r\nexport enum Direction {\r\n    NORTH = 0,\r\n    EAST  = 1,\r\n    SOUTH = 2,\r\n    WEST  = 3,\r\n}\r\n\r\nexport const DIRECTIONS = [\r\n    Direction.NORTH,\r\n    Direction.EAST,\r\n    Direction.SOUTH,\r\n    Direction.WEST,\r\n];\r\n\r\nexport function directionOpposite(dir: Direction) {\r\n    return ((dir + 2) & 3) as Direction;\r\n}\r\n","import * as geom from './geom';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\n/**\r\n * These flags determine whether a given tile has walls in any of the cardinal\r\n * directions, and whether there is a \"body\" in the tile.\r\n */\r\nenum TileFlag {\r\n    WALL_NORTH = 1 << geom.Direction.NORTH,\r\n    WALL_EAST  = 1 << geom.Direction.EAST,\r\n    WALL_WEST  = 1 << geom.Direction.WEST,\r\n    WALL_SOUTH = 1 << geom.Direction.SOUTH,\r\n    BODY       = 1 << geom.DIRECTIONS.length,\r\n}\r\n\r\n/**\r\n * In the shadowcasting algorithm, each shadow is represented by a \"wedge\",\r\n * running from a \"low\" angle to a \"high\" angle.  The wedges are all stored in\r\n * a simple number array, with two numbers for each wedge.  These constants\r\n * (WEDGE_LOW and WEDGE_HIGH) help to identify which number is which.\r\n * WEDGE_COUNT is just how many numbers per wedge.\r\n */\r\nconst WEDGE_LOW = 0;\r\nconst WEDGE_HIGH = 1;\r\nconst WEDGE_COUNT = 2;\r\n\r\n/**\r\n * Bodies in this algorithm do not entirely fill their tiles.  This is\r\n * implemented by adjusting the angles of the shadows the bodies cast,\r\n * making the wedge very slightly narrower.  BODY_EPSILON represents the\r\n * amount of reduction on either side of the wedge.\r\n */\r\nconst BODY_EPSILON = 0.00001;\r\n\r\n/**\r\n * Walls do fill the entire tile edge.  With infinite precision, there would be\r\n * no need to adjust the shadow cast by a wall.  But we're using floating point\r\n * math here, which means imprecision can creep in and cause angles not to line\r\n * up properly.  To fix that, we widen the wedges of the shadows cast by walls.\r\n * We must make sure not to widen them as much as we narrow the body shadows,\r\n * or else they might close the gap we want between a body and a wall.\r\n */\r\nconst WALL_EPSILON = BODY_EPSILON / 10;\r\n\r\n/**\r\n * We avoid heap allocations during the core part of the algorithm by using this\r\n * preallocated offset object.\r\n */\r\nconst LOCAL_OFF = new geom.Offset();\r\n\r\n/**\r\n * The FieldOFViewMap represents the map over which the field of view will be\r\n * computed.  It starts out empty.  You can add walls and bodies to it, and then\r\n * use getFieldOfView() to compute the field of view from a given point.\r\n */\r\nexport class FieldOfViewMap {\r\n    private readonly _size = new geom.Size();\r\n    private readonly _tileFlags: number[];\r\n\r\n    constructor(width: number, height: number) {\r\n        this._size.set(width, height);\r\n        this._tileFlags = new Array<number>(this._size.area).fill(0);\r\n    }\r\n\r\n    private _addFlag(off: geom.OffsetLike, flag: TileFlag) {\r\n        const index = this._size.index(off);\r\n        this._tileFlags[index] |= flag;\r\n    }\r\n\r\n    private _removeFlag(off: geom.OffsetLike, flag: TileFlag) {\r\n        const index = this._size.index(off);\r\n        this._tileFlags[index] &= ~flag;\r\n    }\r\n\r\n    // setup and maintenance\r\n\r\n    /**\r\n     * Adds a wall at a particular edge.  This automatically adds the\r\n     * corresponding wall on the other side.\r\n     */\r\n    addWall(x: number, y: number, dir: geom.Direction) {\r\n        LOCAL_OFF.set(x, y);\r\n        if (this._size.containsOffset(LOCAL_OFF)) {\r\n            this._addFlag(LOCAL_OFF, 1 << dir);\r\n            LOCAL_OFF.addCardinalDirection(dir);\r\n            if (this._size.containsOffset(LOCAL_OFF)) {\r\n                this._addFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a wall at a particular edge.  This automatically removes the\r\n     * corresponding wall on the other side.\r\n     */\r\n    removeWall(x: number, y: number, dir: geom.Direction) {\r\n        LOCAL_OFF.set(x, y);\r\n        if (this._size.containsOffset(LOCAL_OFF)) {\r\n            this._removeFlag(LOCAL_OFF, 1 << dir);\r\n            LOCAL_OFF.addCardinalDirection(dir);\r\n            if (this._size.containsOffset(LOCAL_OFF)) {\r\n                this._removeFlag(LOCAL_OFF, 1 << geom.directionOpposite(dir));\r\n            }\r\n        }\r\n    }\r\n\r\n    getWalls(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const index = this._size.index(LOCAL_OFF);\r\n        return this._tileFlags[index] & geom.DirectionFlags.ALL;\r\n    }\r\n\r\n    getWall(x: number, y: number, dir: geom.Direction) {\r\n        return (this.getWalls(x, y) & (1 << dir)) !== 0;\r\n    }\r\n\r\n    addBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._addFlag(LOCAL_OFF, TileFlag.BODY);\r\n    }\r\n\r\n    removeBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        this._removeFlag(LOCAL_OFF, TileFlag.BODY);\r\n    }\r\n\r\n    getBody(x: number, y: number) {\r\n        LOCAL_OFF.set(x, y);\r\n        const index = this._size.index(LOCAL_OFF);\r\n        return (this._tileFlags[index] & TileFlag.BODY) !== 0;\r\n    }\r\n\r\n    // execution\r\n\r\n    /**\r\n     * Compute the field of view for a camera at the given tile.\r\n     * chebyshevRadius is the vision radius.  It uses chebyshev distance\r\n     * (https://en.wikipedia.org/wiki/Chebyshev_distance), which just means\r\n     * that the limit of vision in a large empty field will be square.\r\n     *\r\n     * This returns a MaskRect, which indicates which tiles are visible.\r\n     * maskRect.get(x, y) will return true for visible tiles.\r\n     */\r\n    getFieldOfView(x: number, y: number, chebyshevRadius: number): geom.MaskRect {\r\n        const origin = new geom.Offset(x, y);\r\n        const boundRect = new geom.Rectangle(\r\n            origin.x - chebyshevRadius, origin.y - chebyshevRadius,\r\n            chebyshevRadius * 2 + 1, chebyshevRadius * 2 + 1,\r\n        );\r\n        const mask = new geom.MaskRect(boundRect);\r\n        // the player can always see itself\r\n        mask.set(origin, true);\r\n        // the field is divided into quadrants\r\n        this._quadrant(mask, origin, chebyshevRadius, -1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius,  1, -1);\r\n        this._quadrant(mask, origin, chebyshevRadius, -1,  1);\r\n        this._quadrant(mask, origin, chebyshevRadius,  1,  1);\r\n        return mask;\r\n    }\r\n\r\n    private _quadrant(mask: geom.MaskRect, origin: geom.OffsetLike, chebyshevRadius: number,\r\n                      xDir: number, yDir: number) {\r\n        const {x: startX, y: startY} = origin;\r\n        const endDX = (Math.min(Math.max(startX + xDir * (chebyshevRadius + 1),\r\n                                         -1), this._size.width) - startX) * xDir;\r\n        const endDY = (Math.min(Math.max(startY + yDir * (chebyshevRadius + 1),\r\n                                         -1), this._size.height) - startY) * yDir;\r\n        if (endDX < 0 || endDY < 0) {\r\n            // the origin is outside of the map\r\n            return;\r\n        }\r\n        const farYFlag = yDir === 1 ? TileFlag.WALL_SOUTH : TileFlag.WALL_NORTH;\r\n        const farXFlag = xDir === 1 ? TileFlag.WALL_EAST : TileFlag.WALL_WEST;\r\n        const startMapIndex = this._size.index(origin);\r\n        const startMaskIndex = mask.index(origin);\r\n        // Initial wedge is from slope zero to slope infinity (i.e. the whole quadrant)\r\n        const wedges = [0, Number.POSITIVE_INFINITY];\r\n        // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n        // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n        for (let dy = 0, yMapIndex = startMapIndex, yMaskIndex = startMaskIndex;\r\n             dy !== endDY && wedges.length > 0;\r\n             dy ++, yMapIndex = yMapIndex + yDir * this._size.width, yMaskIndex = yMaskIndex + yDir * mask.width\r\n        ) {\r\n            const divYpos = 1 / (dy + 0.5);\r\n            const divYneg = dy === 0 ? Number.POSITIVE_INFINITY : 1 / (dy - 0.5);\r\n            let wedgeIndex = 0;\r\n            // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n            // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n            for (let dx = 0, mapIndex = yMapIndex, maskIndex = yMaskIndex,\r\n                 slopeY = -0.5 * divYpos, slopeX = 0.5 * divYneg;\r\n                 dx !== endDX && wedgeIndex !== wedges.length;\r\n                 dx ++, mapIndex = mapIndex + xDir, maskIndex = maskIndex + xDir,\r\n                 slopeY = slopeY + divYpos, slopeX = slopeX + divYneg\r\n            ) {\r\n                // the slopes of the four corners of this tile\r\n                // these are named as follows:\r\n                //   slopeY is the slope closest to the Y axis\r\n                //   slopeFar is the slope to the farthest corner\r\n                //   slopeX is the slope closest to the X axis\r\n                // this is always true:\r\n                //   slopeY < slopeFar < slopeX\r\n                //\r\n                // O = origin, C = current\r\n                // +---+---+---+\r\n                // | O |   |   |\r\n                // +---+---+---X\r\n                // |   |   | C |\r\n                // +---+---Y---F\r\n\r\n                // the walls of this tile\r\n                // these are named as follows:\r\n                //   wallY is the farthest horizontal wall (slopeY to slopeFar)\r\n                //   wallX is the farthest vertical wall (slopeFar to slopeX)\r\n                //\r\n                // O = origin, C = current\r\n                // +---+---+---+\r\n                // | O |   |   |\r\n                // +---+---+---+\r\n                // |   |   | C X\r\n                // +---+---+-Y-+\r\n\r\n                // advance the wedge index until this tile is not after the current wedge\r\n                while (slopeY >= wedges[wedgeIndex + WEDGE_HIGH]) {\r\n                    // X += Y must be written as X = X + Y, in order not to trigger deoptimization due to\r\n                    // http://stackoverflow.com/questions/34595356/what-does-compound-let-const-assignment-mean\r\n                    wedgeIndex = wedgeIndex + WEDGE_COUNT;\r\n                    if (wedgeIndex >= wedges.length) {\r\n                        break;\r\n                    }\r\n                }\r\n                if (wedgeIndex >= wedges.length) {\r\n                    break;\r\n                }\r\n\r\n                // if the current wedge is after this tile, move on\r\n                if (slopeX <= wedges[wedgeIndex + WEDGE_LOW]) {\r\n                    continue;\r\n                }\r\n\r\n                // we can see this tile\r\n                mask.setAt(maskIndex, true);\r\n\r\n                // const/let must be at the top of a block, in order not to trigger deoptimization due to\r\n                // https://github.com/nodejs/node/issues/9729\r\n                {\r\n                    const wallY = (this._tileFlags[mapIndex] & farYFlag) !== 0;\r\n                    const wallX = (this._tileFlags[mapIndex] & farXFlag) !== 0;\r\n                    if (wallX && wallY) {\r\n                        // this tile has both far walls\r\n                        // so we can't see beyond it and the whole range should be cut out of the wedge(s)\r\n                        wedgeIndex = cutWedge(wedges, wedgeIndex, slopeY - WALL_EPSILON, slopeX + WALL_EPSILON);\r\n                    } else {\r\n                        const body = (dx !== 0 || dy !== 0) && (this._tileFlags[mapIndex] & TileFlag.BODY) !== 0;\r\n                        if (body) {\r\n                            if (wallX) {\r\n                                wedgeIndex = cutWedge(wedges, wedgeIndex,\r\n                                    slopeY + BODY_EPSILON, slopeX + WALL_EPSILON);\r\n                            } else if (wallY) {\r\n                                wedgeIndex = cutWedge(wedges, wedgeIndex,\r\n                                    slopeY - WALL_EPSILON, slopeX - BODY_EPSILON);\r\n                            } else {\r\n                                wedgeIndex = cutWedge(wedges, wedgeIndex,\r\n                                    slopeY + BODY_EPSILON, slopeX - BODY_EPSILON);\r\n                            }\r\n                        } else if (wallX) {\r\n                            const slopeFar = slopeY + divYpos;\r\n                            wedgeIndex = cutWedge(wedges, wedgeIndex,\r\n                                slopeFar - WALL_EPSILON, slopeX + WALL_EPSILON);\r\n                        } else if (wallY) {\r\n                            const slopeFar = slopeY + divYpos;\r\n                            wedgeIndex = cutWedge(wedges, wedgeIndex,\r\n                                slopeY - WALL_EPSILON, slopeFar + WALL_EPSILON);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * This function cuts a range of angles out of the wedge array.\r\n */\r\nfunction cutWedge(wedges: number[], wedgeIndex: number, low: number, high: number): number {\r\n    for (; ; ) {\r\n        if (wedgeIndex === wedges.length) {\r\n            return wedgeIndex;\r\n        }\r\n        if (low <= wedges[wedgeIndex + WEDGE_HIGH]) {\r\n            break;\r\n        }\r\n        // This next line is to cover a hypothetical edge case, where two slopes\r\n        // are not the same, but are within the BODY_EPSILON distance.  That\r\n        // would be due to either floating point error or due to a very large\r\n        // field radius.  Either way I haven't been able to construct a test\r\n        // case for it.\r\n        wedgeIndex += WEDGE_COUNT;\r\n    }\r\n    if (low <= wedges[wedgeIndex + WEDGE_LOW]) {\r\n        if (high >= wedges[wedgeIndex + WEDGE_HIGH]) {\r\n            // wedge is entirely occluded, remove it\r\n            wedges.splice(wedgeIndex, WEDGE_COUNT);\r\n            // now looking at the next wedge (or past the end)\r\n            return cutWedge(wedges, wedgeIndex, low, high);\r\n        } else if (high >= wedges[wedgeIndex + WEDGE_LOW]) {\r\n            // low part of wedge is occluded, trim it\r\n            wedges[wedgeIndex + WEDGE_LOW] = high;\r\n            // still looking at the same wedge\r\n        } else {\r\n            // this cut doesn't reach the current wedge\r\n        }\r\n    } else if (high >= wedges[wedgeIndex + WEDGE_HIGH]) {\r\n        // high part of wedge is occluded, trim it\r\n        wedges[wedgeIndex + WEDGE_HIGH] = low;\r\n        // move on to the next wedge\r\n        wedgeIndex += WEDGE_COUNT;\r\n        return cutWedge(wedges, wedgeIndex, low, high);\r\n    } else {\r\n        // middle part of wedge is occluded, split it\r\n        wedges.splice(wedgeIndex, 0, wedges[wedgeIndex + WEDGE_LOW], low);\r\n        wedgeIndex += WEDGE_COUNT;\r\n        wedges[wedgeIndex + WEDGE_LOW] = high;\r\n        // now looking at the second wedge of the split\r\n    }\r\n    return wedgeIndex;\r\n}\r\n","/*\r\n *  WallyFOV\r\n *  github.com/sbj42/wally-fov\r\n *  James Clark\r\n *  Licensed under the MIT license.\r\n */\r\n\r\nexport {FieldOfViewMap} from './field-of-view';\r\nexport {Direction, DirectionFlags, MaskRect} from './geom';\r\n"],"sourceRoot":""}